"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys

from dotenv import load_dotenv 
from pathlib import Path
from corsheaders.defaults import default_headers
from django.contrib.messages import constants


## Build paths inside the project like this: BASE_DIR / 'subdir'. ##
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
STATIC_DIR=os.path.join(BASE_DIR,'static')

load_dotenv(os.path.join(BASE_DIR, ".env")) #Caminho para o .venv

# Diz para Projeto Django aonde estão nossos aplicativos
APPS_DIR = str(os.path.join(BASE_DIR,'apps')) # Dentro da pasta apps na raiz do projeto
sys.path.insert(0, APPS_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = [		
    'localhost', 
	'127.0.0.1',  
]

## Application definition ##
DJANGO_APPS = [ 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Libs que instalamos no projeto
THIRD_APPS = [
    'corsheaders'
]

# São os apps que criamos no projeto 
PROJECT_APPS = [ 
        'apps.base',		
        'apps.pages',   
]

# INSTALLED_APPS é a variavel que django entende para fazer a leitura dos aplicativos.
INSTALLED_APPS = DJANGO_APPS + THIRD_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'requestlogs.middleware.RequestLogsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
				'core.context_processors.context_social',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# CORS Config
CORS_ALLOW_HEADERS = list(default_headers) + [
	'X-Register',
] 
CORS_ORIGIN_ALLOW_ALL = True  # CORS_ORIGIN_ALLOW_ALL como True, o que permite que qualquer site acesse seus recursos.
# Defina como False e adicione o site no CORS_ORIGIN_WHITELIST onde somente o site da lista acesse os seus recursos.
CORS_ALLOW_CREDENTIALS = False 
CORS_ORIGIN_WHITELIST = ['http://meusite.com',] 

## Database ##
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, os.getenv('NAME_DB')),
            #'USER':os.getenv('USER_DB')
            #'PASSWORD': os.getenv('PASSWORD_DB')
            #'HOST':os.getenv('HOST_DB')
            #'PORT':os.getenv('PORT_DB') 
    }
}

## Password validation ##
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


## Internationalization ##
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

"""# Se quiser deixar em PT BR
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_L10N = True
USE_TZ = True"""

## Static files (CSS, JavaScript, Images) ##
# https://docs.djangoproject.com/en/5.1/howto/static-files/ 
STATIC_ROOT = os.path.join(BASE_DIR,'static')
STATIC_URL = 'static/' 

MEDIA_ROOT=os.path.join(BASE_DIR,'media')
MEDIA_URL = 'media/'

## Default primary key field type ##
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## Email ##
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 
EMAIL_PORT = os.getenv('EMAIL_PORT') 
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') 
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

if not DEBUG:
	SECURE_SSL_REDIRECT = True # Direciona todas as solicitações HTTP para HTTPS.
	ADMINS = [(os.getenv('SUPER_USER'), os.getenv('EMAIL'))] # É uma lista de tuplas que contêm informações sobre os administradores do site, 
	# se ocorrer um erro no site, um email será enviado para os endereços listados em ADMINS
	SESSION_COOKIE_SECURE = True # Garante que os cookies de sessão sejam definidos apenas em conexões HTTPS.
	CSRF_COOKIE_SECURE = True # Garante que os cookies CSRF sejam definidos apenas em conexões HTTPS.
	
## Logs ##
REST_FRAMEWORK={ 
    'EXCEPTION_HANDLER': 'requestlogs.views.exception_handler',
}

LOGGING = { 
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'requestlogs_to_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'info.log',
            'when': 'midnight',  # Rotaciona a cada meia-noite
            'backupCount': 7,  # Mantém logs dos últimos 7 dias
            'formatter': 'verbose',  # Configuração de formatação
        },
    },
    'loggers': {
        'requestlogs': {
            'handlers': ['requestlogs_to_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
    },
}

REQUESTLOGS = {
    'SECRETS': ['password', 'token'], # Criptografa informações do usuário.
    'METHODS': ('PUT', 'PATCH', 'POST', 'DELETE'),
}

## Message settings (Boostrap)##
MESSAGE_TAGS = {
	constants.ERROR: 'alert-danger',
	constants.WARNING: 'alert-warning',
	constants.DEBUG: 'alert-danger',
	constants.SUCCESS: 'alert-success',
	constants.INFO: 'alert-info',
}